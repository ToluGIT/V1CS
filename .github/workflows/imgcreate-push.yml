name: docker-image-security-scan-tmas

on:
  workflow_dispatch:

env:
  TMAS_API_KEY: ${{ secrets.TMAS_API_KEY }}
  REGION: us-east-1
  THRESHOLD: "medium"
  MALWARE_SCAN: true
  SECRETS_SCAN: true
  FAIL_ACTION: false
  IMAGE_NAME: vulnerable-test-image

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Repository Checkout
        uses: actions/checkout@v4

      - name: Configure QEMU
        uses: docker/setup-qemu-action@v3

      - name: Configure Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: "--debug"

      - name: Build Test Image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: test-image:${{ github.sha }}
          outputs: type=docker,dest=/tmp/image.tar

      - name: Setup Scanner
        run: |
          chmod +x ./install_tmas.cli.sh
          ./install_tmas.cli.sh

      - name: Execute Security Scan
        env:
          SBOM: true
        run: |
          tmas scan \
            -V \
            "$(if [ "$MALWARE_SCAN" = "true" ]; then echo "-M"; fi)" \
            "$(if [ "$SECRETS_SCAN" = "true" ]; then echo "-S"; fi)" \
            -r "$REGION" docker-archive:/tmp/image.tar \
            "$(if [ "$SBOM" = "true" ]; then echo "--saveSBOM"; fi)" | \
            tee result.json

          if [ "$SBOM" = "true" ]; then mv SBOM_* sbom.json; fi

          fail_vul=false
          fail_mal=false
          fail_sec=false
          [ "${THRESHOLD}" = "any" ] && \
            [ $(jq '.vulnerabilities.totalVulnCount' result.json) != "0" ] && fail_vul=true

          [ "${THRESHOLD}" = "critical" ] && \
            [ $(jq '.vulnerabilities.criticalCount' result.json) != "0" ] && fail_vul=true

          [ "${THRESHOLD}" = "high" ] && \
            [ $(jq '.vulnerabilities.highCount + .vulnerabilities.criticalCount' result.json) != "0" ] && fail_vul=true

          [ "${THRESHOLD}" = "medium" ] && \
            [ $(jq '.vulnerabilities.mediumCount + .vulnerabilities.highCount + .vulnerabilities.criticalCount' result.json) != "0" ] && fail_vul=true

          [ "${THRESHOLD}" = "low" ] && \
            [ $(jq '.vulnerabilities.lowCount + .vulnerabilities.mediumCount + .vulnerabilities.highCount + .vulnerabilities.criticalCount' result.json) != "0" ] && fail_vul=true

          [ $(jq '.malware.scanResult' result.json) != "0" ] && fail_mal=true

          [ $(jq '.secrets.unmitigatedFindingsCount' result.json) != "0" ] && fail_sec=true

          [ "$fail_vul" = "true" ] && echo "❌ Vulnerability threshold exceeded" > vulnerabilities || true
          [ "$fail_mal" = "true" ] && echo "❌ Malware detected" > malware || true
          [ "$fail_sec" = "true" ] && echo "❌ Secrets found" > secrets || true

      - name: Store Scan Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            result.json
            sbom.json
          retention-days: 30

      - name: Prepare Notification Content
        if: always()
        run: |
          echo "Security Scan Results for ${{ github.repository }}" > notification.txt
          echo "Commit: ${{ github.sha }}" >> notification.txt
          echo "Workflow: ${{ github.workflow }}" >> notification.txt
          echo "\nScan Results:" >> notification.txt
          if [ -f "vulnerabilities" ]; then cat vulnerabilities >> notification.txt; fi
          if [ -f "malware" ]; then cat malware >> notification.txt; fi
          if [ -f "secrets" ]; then cat secrets >> notification.txt; fi
          if [ ! -f "vulnerabilities" ] && [ ! -f "malware" ] && [ ! -f "secrets" ]; then
            echo "✅ All security checks passed" >> notification.txt
          fi
          
          # Extract key SBOM metrics for notifications with error handling
          if [ -f "sbom.json" ]; then
            echo "\nSBOM Summary:" >> notification.txt
            
            # Safely check if packages exist and get count
            PACKAGE_COUNT=$(jq 'if .packages then (.packages | length) else 0 end' sbom.json)
            echo "Total Packages: ${PACKAGE_COUNT}" >> notification.txt
            
            if [ "$PACKAGE_COUNT" -gt 0 ]; then
              echo "Dependencies:" >> notification.txt
              # Safely extract package information with error handling
              jq -r '
                if .packages then
                  .packages[] | 
                  select(.type=="library") | 
                  (
                    .name + 
                    " v" + 
                    (if .versionInfo then .versionInfo else "unknown" end)
                  )
                else
                  empty
                end' sbom.json | head -n 5 >> notification.txt
              
              if [ "$PACKAGE_COUNT" -gt 5 ]; then
                echo "... and more" >> notification.txt
              fi
            else
              echo "No package information found in SBOM" >> notification.txt
            fi
          else
            echo "\nNo SBOM file generated" >> notification.txt
          fi

      - name: Send Slack Notification
              if: always()
              run: |
                NOTIFICATION_CONTENT=$(cat notification.txt)
                # Read SBOM summary
                if [ -f "sbom.json" ]; then
                  VULN_COUNT=$(jq '.vulnerabilities.totalVulnCount // 0' result.json)
                  CRITICAL_COUNT=$(jq '.vulnerabilities.criticalCount // 0' result.json)
                  HIGH_COUNT=$(jq '.vulnerabilities.highCount // 0' result.json)
                  MEDIUM_COUNT=$(jq '.vulnerabilities.mediumCount // 0' result.json)
                  LOW_COUNT=$(jq '.vulnerabilities.lowCount // 0' result.json)
                  
                  SCAN_SUMMARY="*Vulnerability Summary:*
                  • Critical: ${CRITICAL_COUNT}
                  • High: ${HIGH_COUNT}
                  • Medium: ${MEDIUM_COUNT}
                  • Low: ${LOW_COUNT}
                  • Total: ${VULN_COUNT}"
                else
                  SCAN_SUMMARY="No vulnerability data available"
                fi
      
                curl -X POST -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
                     -H "Content-Type: application/json" \
                     https://slack.com/api/chat.postMessage \
                     -d '{
                       "channel": "C085HTDSFP1",
                       "blocks": [
                         {
                           "type": "header",
                           "text": {
                             "type": "plain_text",
                             "text": "Security Scan Results"
                           }
                         },
                         {
                           "type": "section",
                           "text": {
                             "type": "mrkdwn",
                             "text": "*Repository:* ${{ github.repository }}\n*Commit:* ${{ github.sha }}\n*Workflow:* ${{ github.workflow }}"
                           }
                         },
                         {
                           "type": "section",
                           "text": {
                             "type": "mrkdwn",
                             "text": "'"${SCAN_SUMMARY}"'"
                           }
                         },
                         {
                           "type": "section",
                           "text": {
                             "type": "mrkdwn",
                             "text": "*Detailed Results:*\n```'"${NOTIFICATION_CONTENT}"'```"
                           }
                         },
                         {
                           "type": "section",
                           "text": {
                             "type": "mrkdwn",
                             "text": "*Action Required:*\n• Review the scan results\n• Check SBOM for package details\n• Verify any detected vulnerabilities"
                           }
                         },
                         {
                           "type": "section",
                           "text": {
                             "type": "mrkdwn",
                             "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View full results in GitHub Actions>"
                           }
                         }
                       ]
                     }'

      - name: Send Email Notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: Security Scan Results - ${{ github.repository }}
          body: file://notification.txt
          to: toluwanimibanji@gmail.com
          from: GitHub Actions
          attachments: ./result.json,./sbom.json

      - name: Fail Action
        run: |
          if [ "$FAIL_ACTION" = true ]; then
            if [ -f "malware" ]; then cat malware; fi
            if [ -f "secrets" ]; then cat secrets; fi
            if [ -f "vulnerabilities" ]; then cat vulnerabilities; fi
            if [ -f "malware" ] || [ -f "secrets" ] || [ -f "vulnerabilities" ]; then exit 1; fi
          fi

      - name: Login to GitHub Container Registry
        if: success()
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Set lowercase repository owner
        if: success()
        run: |
          echo "REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build and Push to GHCR
        if: success()
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ env.REPO_OWNER }}/${{ env.IMAGE_NAME }}:latest
            ghcr.io/${{ env.REPO_OWNER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.description=Vulnerable test image for security scanning
            org.opencontainers.image.licenses=MIT

      - name: Registry Scan
        if: success()
        run: |
          tmas scan \
            -V \
            "$(if [ "$MALWARE_SCAN" = true ]; then echo "-M"; fi)" \
            "$(if [ "$SECRETS_SCAN" = true ]; then echo "-S"; fi)" \
            -r "$REGION" registry:ghcr.io/${{ env.REPO_OWNER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
