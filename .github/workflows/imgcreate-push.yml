name: docker-image-security-scan-tmas

on:
  workflow_dispatch:

env:
  TMAS_API_KEY: ${{ secrets.TMAS_API_KEY }}
  REGION: us-east-1
  THRESHOLD: "medium"
  MALWARE_SCAN: true
  SECRETS_SCAN: true
  FAIL_ACTION: true
  IMAGE_NAME: vulnerable-test-image

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Repository Checkout
        uses: actions/checkout@v4

      - name: Configure QEMU
        uses: docker/setup-qemu-action@v3

      - name: Configure Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: "--debug"

      - name: Build Test Image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: test-image:${{ github.sha }}
          outputs: type=docker,dest=/tmp/image.tar

      - name: Setup Scanner
        run: |
          chmod +x ./install_tmas.cli.sh
          ./install_tmas.cli.sh

      - name: Execute Security Scan
        env:
          SBOM: true
        run: |
          tmas scan \
            -V \
            "$(if [ "$MALWARE_SCAN" = "true" ]; then echo "-M"; fi)" \
            "$(if [ "$SECRETS_SCAN" = "true" ]; then echo "-S"; fi)" \
            -r "$REGION" docker-archive:/tmp/image.tar \
            "$(if [ "$SBOM" = "true" ]; then echo "--saveSBOM"; fi)" | \
            tee result.json

          if [ "$SBOM" = "true" ]; then mv SBOM_* sbom.json; fi

          fail_vul=false
          fail_mal=false
          fail_sec=false
          [ "${THRESHOLD}" = "any" ] && \
            [ $(jq '.vulnerabilities.totalVulnCount' result.json) != "0" ] && fail_vul=true

          [ "${THRESHOLD}" = "critical" ] && \
            [ $(jq '.vulnerabilities.criticalCount' result.json) != "0" ] && fail_vul=true

          [ "${THRESHOLD}" = "high" ] && \
            [ $(jq '.vulnerabilities.highCount + .vulnerabilities.criticalCount' result.json) != "0" ] && fail_vul=true

          [ "${THRESHOLD}" = "medium" ] && \
            [ $(jq '.vulnerabilities.mediumCount + .vulnerabilities.highCount + .vulnerabilities.criticalCount' result.json) != "0" ] && fail_vul=true

          [ "${THRESHOLD}" = "low" ] && \
            [ $(jq '.vulnerabilities.lowCount + .vulnerabilities.mediumCount + .vulnerabilities.highCount + .vulnerabilities.criticalCount' result.json) != "0" ] && fail_vul=true

          [ $(jq '.malware.scanResult' result.json) != "0" ] && fail_mal=true

          [ $(jq '.secrets.unmitigatedFindingsCount' result.json) != "0" ] && fail_sec=true

          [ "$fail_vul" = "true" ] && echo "❌ Vulnerability threshold exceeded" > vulnerabilities || true
          [ "$fail_mal" = "true" ] && echo "❌ Malware detected" > malware || true
          [ "$fail_sec" = "true" ] && echo "❌ Secrets found" > secrets || true

      - name: Store Scan Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            result.json
            sbom.json
          retention-days: 30

      - name: Fail Action
        run: |
          if [ "$FAIL_ACTION" = true ]; then
            if [ -f "malware" ]; then cat malware; fi
            if [ -f "secrets" ]; then cat secrets; fi
            if [ -f "vulnerabilities" ]; then cat vulnerabilities; fi
            if [ -f "malware" ] || [ -f "secrets" ] || [ -f "vulnerabilities" ]; then exit 1; fi
          fi

      - name: Login to GitHub Container Registry
        if: success() && github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Build and Push to GHCR
        if: success() && github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Registry Scan
        if: success() && github.event_name != 'pull_request'
        run: |
          tmas scan \
            -V \
            "$(if [ "$MALWARE_SCAN" = true ]; then echo "-M"; fi)" \
            "$(if [ "$SECRETS_SCAN" = true ]; then echo "-S"; fi)" \
            -r "$REGION" registry:ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
